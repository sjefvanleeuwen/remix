@page "/admin/genres"
@attribute [Authorize(Roles = "Admin")]
@inject IGenreService GenreService
@inject NavigationManager NavigationManager

<PageTitle>Genre Management - RemixHub</PageTitle>

<div class="container my-4">
    <h1>Genre Management</h1>
    <p class="lead">Manage music genres and subgenres</p>
    
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Genres</h5>
                    <button class="btn btn-primary" @onclick="() => ShowGenreModal()">
                        <i class="bi bi-plus-lg"></i> Add Genre
                    </button>
                </div>
                <div class="card-body">
                    @if (loading)
                    {
                        <div class="d-flex justify-content-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <span class="ms-2">Loading genres...</span>
                        </div>
                    }
                    else if (genres == null || !genres.Any())
                    {
                        <div class="alert alert-info">
                            No genres found. Start by adding a new genre.
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Parent Genre</th>
                                        <th>Description</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var genreGroup in genres.Where(g => g.ParentGenreId == null).OrderBy(g => g.Name))
                                    {
                                        <tr class="table-active">
                                            <td><strong>@genreGroup.Name</strong></td>
                                            <td>-</td>
                                            <td>@genreGroup.Description</td>
                                            <td>
                                                <div class="btn-group">
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowGenreModal(genreGroup.GenreId)">
                                                        <i class="bi bi-pencil"></i> Edit
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ShowDeleteModal(genreGroup.GenreId)">
                                                        <i class="bi bi-trash"></i> Delete
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-success" @onclick="() => ShowGenreModal(parentId: genreGroup.GenreId)">
                                                        <i class="bi bi-plus-lg"></i> Add Subgenre
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                        
                                        @foreach (var subgenre in genres.Where(g => g.ParentGenreId == genreGroup.GenreId).OrderBy(g => g.Name))
                                        {
                                            <tr>
                                                <td class="ps-4">@subgenre.Name</td>
                                                <td>@subgenre.ParentGenreName</td>
                                                <td>@subgenre.Description</td>
                                                <td>
                                                    <div class="btn-group">
                                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowGenreModal(subgenre.GenreId)">
                                                            <i class="bi bi-pencil"></i> Edit
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => ShowDeleteModal(subgenre.GenreId)">
                                                            <i class="bi bi-trash"></i> Delete
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Genre Structure</h5>
                </div>
                <div class="card-body">
                    <p>Genres in RemixHub are organized in a two-level hierarchy:</p>
                    <ul>
                        <li><strong>Main Genres:</strong> Top-level genre categories (e.g., Electronic, Rock, Hip-Hop)</li>
                        <li><strong>Subgenres:</strong> More specific genres that belong to a main genre (e.g., House under Electronic)</li>
                    </ul>
                    <p>When users upload tracks, they select a main genre and optionally a subgenre.</p>
                </div>
            </div>
        </div>
    </div>
</div>

@if (showGenreModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingGenre.GenreId > 0 ? "Edit Genre" : "Add Genre")</h5>
                    <button type="button" class="btn-close" @onclick="HideGenreModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editingGenre" OnValidSubmit="SaveGenre">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="genreName" class="form-label">Name</label>
                            <InputText id="genreName" @bind-value="editingGenre.Name" class="form-control" />
                            <ValidationMessage For="@(() => editingGenre.Name)" class="text-danger" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="parentGenre" class="form-label">Parent Genre</label>
                            <select id="parentGenre" @bind="editingGenre.ParentGenreId" class="form-select" disabled="@(editingGenre.ParentGenreId.HasValue && editingGenre.ParentGenreId.Value > 0)">
                                <option value="">None (Main Genre)</option>
                                @foreach (var parent in genres.Where(g => g.ParentGenreId == null))
                                {
                                    <option value="@parent.GenreId">@parent.Name</option>
                                }
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <InputTextArea id="description" @bind-value="editingGenre.Description" class="form-control" rows="3" />
                        </div>
                        
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showDeleteModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Genre</h5>
                    <button type="button" class="btn-close" @onclick="HideDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this genre? This action cannot be undone.</p>
                    @if (deleteError)
                    {
                        <div class="alert alert-danger">
                            This genre cannot be deleted because it is in use or has subgenres.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteGenre">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<GenreViewModel> genres;
    private bool loading = true;
    private bool showGenreModal = false;
    private bool showDeleteModal = false;
    private bool deleteError = false;
    private GenreViewModel editingGenre = new GenreViewModel();
    private int genreToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadGenresAsync();
    }

    private async Task LoadGenresAsync()
    {
        loading = true;
        
        try
        {
            genres = await GenreService.GetGenresAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading genres: {ex.Message}");
            genres = new List<GenreViewModel>();
        }
        finally
        {
            loading = false;
        }
    }

    private void ShowGenreModal(int? id = null, int? parentId = null)
    {
        if (id.HasValue)
        {
            // Editing existing genre
            var genre = genres.FirstOrDefault(g => g.GenreId == id.Value);
            if (genre != null)
            {
                editingGenre = new GenreViewModel
                {
                    GenreId = genre.GenreId,
                    Name = genre.Name,
                    Description = genre.Description,
                    ParentGenreId = genre.ParentGenreId
                };
            }
        }
        else
        {
            // Adding new genre
            editingGenre = new GenreViewModel
            {
                ParentGenreId = parentId
            };
        }
        
        showGenreModal = true;
    }

    private void HideGenreModal()
    {
        showGenreModal = false;
    }

    private async Task SaveGenre()
    {
        try
        {
            if (editingGenre.GenreId > 0)
            {
                // Update existing genre
                await GenreService.UpdateGenreAsync(editingGenre);
            }
            else
            {
                // Create new genre
                await GenreService.CreateGenreAsync(editingGenre);
            }
            
            // Reload genres
            await LoadGenresAsync();
            
            // Hide modal
            HideGenreModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving genre: {ex.Message}");
        }
    }

    private void ShowDeleteModal(int id)
    {
        genreToDelete = id;
        deleteError = false;
        showDeleteModal = true;
    }

    private void HideDeleteModal()
    {
        showDeleteModal = false;
    }

    private async Task DeleteGenre()
    {
        try
        {
            var result = await GenreService.DeleteGenreAsync(genreToDelete);
            
            if (result)
            {
                // Reload genres
                await LoadGenresAsync();
                
                // Hide modal
                HideDeleteModal();
            }
            else
            {
                deleteError = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting genre: {ex.Message}");
            deleteError = true;
        }
    }
}

@page "/admin/users"
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<PageTitle>User Management - RemixHub</PageTitle>

<div class="container my-4">
    <h1>User Management</h1>
    <p class="lead">Manage user accounts, roles, and permissions</p>
    
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Users</h5>
            <div>
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search users..." @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearchKeyPress" />
                    <button class="btn btn-outline-secondary" @onclick="SearchUsers">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (loading)
            {
                <div class="d-flex justify-content-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="ms-2">Loading users...</span>
                </div>
            }
            else if (users == null || !users.Any())
            {
                <div class="alert alert-info">
                    No users found matching your search criteria.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Display Name</th>
                                <th>Role</th>
                                <th>Status</th>
                                <th>Tracks</th>
                                <th>Remixes</th>
                                <th>Joined</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in users)
                            {
                                <tr>
                                    <td>@user.UserName</td>
                                    <td>@user.Email</td>
                                    <td>@user.DisplayName</td>
                                    <td>
                                        @foreach (var role in user.Roles)
                                        {
                                            <span class="badge bg-primary me-1">@role</span>
                                        }
                                    </td>
                                    <td>
                                        @if (user.IsVerified)
                                        {
                                            <span class="badge bg-success">Verified</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning text-dark">Unverified</span>
                                        }
                                    </td>
                                    <td>@user.TrackCount</td>
                                    <td>@user.RemixCount</td>
                                    <td>@user.CreatedAt.ToString("MMM dd, yyyy")</td>
                                    <td>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                Actions
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li><a class="dropdown-item" href="@($"profile/{user.Id}")">View Profile</a></li>
                                                <li><a class="dropdown-item" @onclick="() => ShowRoleModal(user)">Change Role</a></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li><a class="dropdown-item text-danger" @onclick="() => ShowBanModal(user)">Ban User</a></li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <span>Showing @users.Count users</span>
                    <div>
                        <button class="btn btn-outline-primary" disabled="@(page <= 1)" @onclick="PreviousPage">
                            <i class="bi bi-chevron-left"></i> Previous
                        </button>
                        <button class="btn btn-outline-primary ms-2" @onclick="NextPage">
                            Next <i class="bi bi-chevron-right"></i>
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@if (showRoleModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Change User Role</h5>
                    <button type="button" class="btn-close" @onclick="HideRoleModal"></button>
                </div>
                <div class="modal-body">
                    <p>Change role for user: <strong>@selectedUser?.UserName</strong></p>
                    
                    <div class="mb-3">
                        <label for="userRole" class="form-label">Role</label>
                        <select id="userRole" @bind="selectedRole" class="form-select">
                            <option value="User">User</option>
                            <option value="Admin">Admin</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideRoleModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="UpdateUserRole">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showBanModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Ban User</h5>
                    <button type="button" class="btn-close" @onclick="HideBanModal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i> Warning: This action will prevent the user from logging in.
                    </div>
                    
                    <p>Are you sure you want to ban user: <strong>@selectedUser?.UserName</strong>?</p>
                    
                    <div class="mb-3">
                        <label for="banReason" class="form-label">Reason (optional)</label>
                        <textarea id="banReason" @bind="banReason" class="form-control" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideBanModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="BanUser">Ban User</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<UserViewModel> users;
    private bool loading = true;
    private string searchTerm = "";
    private int page = 1;
    private int pageSize = 20;
    
    private bool showRoleModal = false;
    private bool showBanModal = false;
    private UserViewModel selectedUser;
    private string selectedRole;
    private string banReason;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        loading = true;
        
        try
        {
            // In a real app, you would paginate on the server
            var response = await HttpClient.GetFromJsonAsync<List<UserViewModel>>("api/admin/users");
            
            // Apply client-side filtering if search term is provided
            if (!string.IsNullOrEmpty(searchTerm) && response != null)
            {
                var term = searchTerm.ToLower();
                users = response
                    .Where(u => u.UserName.ToLower().Contains(term) || 
                           u.Email.ToLower().Contains(term) || 
                           u.DisplayName.ToLower().Contains(term))
                    .Skip((page - 1) * pageSize)
                    .Take(pageSize)
                    .ToList();
            }
            else if (response != null)
            {
                users = response
                    .Skip((page - 1) * pageSize)
                    .Take(pageSize)
                    .ToList();
            }
            else
            {
                users = new List<UserViewModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
            users = new List<UserViewModel>();
        }
        finally
        {
            loading = false;
        }
    }

    private async Task SearchUsers()
    {
        page = 1;
        await LoadUsersAsync();
    }

    private void HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchUsers();
        }
    }

    private async Task PreviousPage()
    {
        if (page > 1)
        {
            page--;
            await LoadUsersAsync();
        }
    }

    private async Task NextPage()
    {
        page++;
        await LoadUsersAsync();
    }

    private void ShowRoleModal(UserViewModel user)
    {
        selectedUser = user;
        selectedRole = user.Roles.FirstOrDefault() ?? "User";
        showRoleModal = true;
    }

    private void HideRoleModal()
    {
        showRoleModal = false;
    }

    private async Task UpdateUserRole()
    {
        try
        {
            var model = new UpdateRoleViewModel { Role = selectedRole };
            var response = await HttpClient.PostAsJsonAsync($"api/admin/users/{selectedUser.Id}/role", model);
            
            if (response.IsSuccessStatusCode)
            {
                // Update user role in the list
                var user = users.FirstOrDefault(u => u.Id == selectedUser.Id);
                if (user != null)
                {
                    user.Roles.Clear();
                    user.Roles.Add(selectedRole);
                }
                
                // Hide modal
                HideRoleModal();
            }
            else
            {
                // Show error message
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating user role: {ex.Message}");
        }
    }

    private void ShowBanModal(UserViewModel user)
    {
        selectedUser = user;
        banReason = string.Empty;
        showBanModal = true;
    }

    private void HideBanModal()
    {
        showBanModal = false;
    }

    private async Task BanUser()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync($"api/admin/users/{selectedUser.Id}/ban", banReason);
            
            if (response.IsSuccessStatusCode)
            {
                // Remove user from the list
                users.RemoveAll(u => u.Id == selectedUser.Id);
                
                // Hide modal
                HideBanModal();
            }
            else
            {
                // Show error message
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error banning user: {ex.Message}");
        }
    }
}

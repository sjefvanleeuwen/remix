@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<PageTitle>Register - RemixHub</PageTitle>

<div class="row justify-content-center mt-5">
    <div class="col-md-6">
        <div class="card shadow">
            <div class="card-body p-4">
                <h2 class="text-center mb-4">Create an Account</h2>
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }
                
                @if (debugErrors?.Any() == true)
                {
                    <div class="alert alert-warning">
                        <h6>Debug Validation Errors:</h6>
                        <ul>
                            @foreach(var err in debugErrors)
                            {
                                <li>@err</li>
                            }
                        </ul>
                    </div>
                }
                
                @if (registrationSuccess)
                {
                    <div class="alert alert-success">
                        <h4 class="alert-heading">Registration Successful!</h4>
                        <p>Please check your email to verify your account.</p>
                        <hr>
                        <p class="mb-0">Once verified, you'll be able to login and start using RemixHub.</p>
                    </div>
                }
                else
                {
                    <EditForm Model="registerModel" OnValidSubmit="HandleRegistration" OnInvalidSubmit="LogInvalidSubmit">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" @bind-Value="registerModel.Username" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Username)" class="text-danger" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" @bind-Value="registerModel.Email" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Email)" class="text-danger" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" @bind-Value="registerModel.Password" type="password" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />
                            <small class="form-text text-muted">Password must be at least 8 characters with uppercase, lowercase, numbers, and special characters.</small>
                        </div>
                        
                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <InputText id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" type="password" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-danger" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="captchaResponse" class="form-label">Enter CAPTCHA</label>
                            <div class="d-flex align-items-center mb-2">
                                @if (!string.IsNullOrEmpty(captchaImage))
                                {
                                    <img src="@captchaImage" alt="CAPTCHA" class="img-fluid" style="max-height:80px;" />
                                    <button type="button" class="btn btn-link ms-2" @onclick="RefreshCaptcha" title="Refresh CAPTCHA">
                                        <i class="bi bi-arrow-clockwise" style="font-size: 1.5rem;"></i>
                                    </button>
                                }
                            </div>
                            <InputText id="captchaResponse" @bind-Value="registerModel.CaptchaResponse" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.CaptchaResponse)" class="text-danger" />
                            
                            <div class="mt-2 small text-muted">
                                <strong>Debug:</strong> 
                                <div>CaptchaKey = @(registerModel.CaptchaKey ?? "null")</div>
                                <div>CaptchaResponse = @(registerModel.CaptchaResponse ?? "empty")</div>
                            </div>
                        </div>
                        
                        <div class="d-grid gap-2 mb-3">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-1">Processing...</span>
                                }
                                else
                                {
                                    <span>Register</span>
                                }
                            </button>
                            <button type="button" class="btn btn-outline-secondary" @onclick="TestDirectSubmission">
                                Test Direct Submission
                            </button>
                        </div>
                        
                        <div class="text-center small">
                            Already have an account? <a href="login">Login</a>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterViewModel registerModel = new RegisterViewModel();
    private bool isLoading = false;
    private bool registrationSuccess = false;
    private string errorMessage = string.Empty;
    private string captchaImage = string.Empty;
    private List<string> debugErrors;

    public class CaptchaResponse
    {
        public string Key { get; set; }
        public string Image { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCaptchaAsync();
    }

    private async Task LoadCaptchaAsync()
    {
        try
        {
            var captcha = await HttpClient.GetFromJsonAsync<CaptchaResponse>("api/captcha/generate");
            if(captcha != null)
            {
                registerModel.CaptchaKey = captcha.Key;
                captchaImage = captcha.Image;
                Console.WriteLine($"Loaded Captcha - Key: {captcha.Key}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading CAPTCHA: " + ex.Message);
        }
    }

    private async Task RefreshCaptcha()
    {
        await LoadCaptchaAsync();
    }

    private async Task HandleRegistration()
    {
        Console.WriteLine("=== REGISTRATION SUBMISSION ===");
        Console.WriteLine($"Username: {registerModel.Username}");
        Console.WriteLine($"Email: {registerModel.Email}");
        Console.WriteLine($"CaptchaKey: {registerModel.CaptchaKey}");
        Console.WriteLine($"CaptchaResponse: {registerModel.CaptchaResponse}");
        
        isLoading = true;
        errorMessage = string.Empty;
        debugErrors = null;
        
        try
        {
            var result = await AuthService.RegisterAsync(registerModel);
            if (result)
            {
                registrationSuccess = true;
            }
            else
            {
                errorMessage = "Registration failed. Please check the console for more details.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Registration exception: {ex.Message}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private void LogInvalidSubmit(EditContext editContext)
    {
        errorMessage = "Form validation failed.";
        debugErrors = editContext.GetValidationMessages().ToList();
        foreach (var msg in debugErrors)
        {
            Console.WriteLine("Validation Error: " + msg);
        }
    }

    private async Task TestDirectSubmission()
    {
        Console.WriteLine("Test direct submission initiated");
        Console.WriteLine($"CaptchaKey: {registerModel.CaptchaKey}");
        Console.WriteLine($"CaptchaResponse: {registerModel.CaptchaResponse}");
        
        try {
            var result = await AuthService.RegisterAsync(registerModel);
            Console.WriteLine($"Direct submission result: {result}");
        }
        catch (Exception ex) {
            Console.WriteLine($"Direct submission error: {ex.Message}");
        }
    }

    private void OnCaptchaChanged(ChangeEventArgs e)
    {
        Console.WriteLine("Captcha input changed to: " + e.Value?.ToString());
    }
}

@page "/explore"
@using System.Text.Json
@inject ITrackService TrackService
@inject IGenreService GenreService
@inject NavigationManager NavigationManager

<PageTitle>Explore Tracks - RemixHub</PageTitle>

<div class="container my-4">
    <h1>Explore Tracks</h1>
    <p class="lead">Discover music from artists around the world</p>
    
    <div class="row g-4">
        <div class="col-md-3">
            <div class="card sticky-top" style="top: 20px; z-index: 1;">
                <div class="card-body">
                    <h5 class="card-title">Filters</h5>
                    
                    <div class="mb-3">
                        <label for="keyword" class="form-label">Search</label>
                        <input type="text" id="keyword" class="form-control" @bind="filter.Keyword" @bind:event="oninput" />
                    </div>
                    
                    <div class="mb-3">
                        <label for="genreId" class="form-label">Genre</label>
                        <select id="genreId" class="form-select" @bind="filter.GenreId">
                            <option value="">All Genres</option>
                            @foreach (var genre in genres)
                            {
                                <option value="@genre.GenreId">@genre.Name</option>
                            }
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">BPM Range</label>
                        <div class="d-flex gap-2">
                            <input type="number" class="form-control" placeholder="Min" @bind="filter.MinBpm" />
                            <input type="number" class="form-control" placeholder="Max" @bind="filter.MaxBpm" />
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="key" class="form-label">Musical Key</label>
                        <select id="key" class="form-select" @bind="filter.Key">
                            <option value="">Any Key</option>
                            @foreach (var key in musicalKeys)
                            {
                                <option value="@key">@key</option>
                            }
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label for="sortBy" class="form-label">Sort By</label>
                        <select id="sortBy" class="form-select" @bind="filter.SortBy">
                            <option value="newest">Newest First</option>
                            <option value="oldest">Oldest First</option>
                            <option value="title">Title (A-Z)</option>
                            <option value="artist">Artist (A-Z)</option>
                        </select>
                    </div>
                    
                    <div class="d-grid">
                        <button class="btn btn-primary" @onclick="ApplyFilters">Apply Filters</button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-9">
            @if (loading)
            {
                <div class="d-flex justify-content-center my-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="ms-2">Loading tracks...</span>
                </div>
            }
            else if (tracks == null || !tracks.Any())
            {
                <div class="alert alert-info">
                    No tracks found matching your criteria. Try adjusting your filters.
                </div>
            }
            else
            {
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                    @foreach (var track in tracks)
                    {
                        <div class="col">
                            <div class="card h-100 track-card">
                                <div class="card-body">
                                    <h5 class="card-title">@track.Title</h5>
                                    <h6 class="card-subtitle mb-2 text-muted">@track.Artist</h6>
                                    <p class="card-text text-truncate">@track.Description</p>
                                    <div class="mb-2">
                                        <span class="genre-badge">@track.GenreName</span>
                                        @if (!string.IsNullOrEmpty(track.SubgenreName))
                                        {
                                            <span class="genre-badge">@track.SubgenreName</span>
                                        }
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-muted">
                                            <i class="bi bi-clock"></i> @FormatDuration(track.DurationSeconds)
                                        </small>
                                        <small class="text-muted">
                                            <i class="bi bi-calendar3"></i> @track.UploadDate.ToString("MMM dd, yyyy")
                                        </small>
                                    </div>
                                </div>
                                <div class="card-footer bg-transparent">
                                    <a href="@($"track/{track.TrackId}")" class="btn btn-sm btn-primary w-100">View Details</a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                <div class="d-flex justify-content-center mt-4">
                    <nav aria-label="Page navigation">
                        <ul class="pagination">
                            <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                                <a class="page-link" href="javascript:void(0)" @onclick="() => ChangePage(currentPage - 1)" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                            
                            @for (int i = 1; i <= totalPages; i++)
                            {
                                var pageNumber = i;
                                <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                    <a class="page-link" href="javascript:void(0)" @onclick="() => ChangePage(pageNumber)">@pageNumber</a>
                                </li>
                            }
                            
                            <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                                <a class="page-link" href="javascript:void(0)" @onclick="() => ChangePage(currentPage + 1)" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<TrackViewModel> tracks = new List<TrackViewModel>();
    private List<GenreViewModel> genres = new List<GenreViewModel>();
    private List<string> musicalKeys = new List<string> { "A", "Am", "A#", "A#m", "B", "Bm", "C", "Cm", "C#", "C#m", "D", "Dm", "D#", "D#m", "E", "Em", "F", "Fm", "F#", "F#m", "G", "Gm", "G#", "G#m" };
    private TrackFilterViewModel filter = new TrackFilterViewModel();
    private bool loading = true;
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 12;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadGenresAsync();
        await LoadTracksAsync();
    }
    
    private async Task LoadGenresAsync()
    {
        try
        {
            genres = await GenreService.GetGenresAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading genres: {ex.Message}");
        }
    }
    
    private async Task LoadTracksAsync()
    {
        loading = true;
        
        try
        {
            filter.Page = currentPage;
            filter.PageSize = pageSize;
            
            var result = await TrackService.GetTracksAsync(filter);
            
            tracks = result.Tracks;
            totalPages = (int)Math.Ceiling((double)result.TotalCount / result.PageSize);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tracks: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }
    
    private async Task ApplyFilters()
    {
        currentPage = 1;
        await LoadTracksAsync();
    }
    
    private async Task ChangePage(int page)
    {
        if (page < 1 || page > totalPages)
            return;
            
        currentPage = page;
        await LoadTracksAsync();
    }
    
    private string FormatDuration(int seconds)
    {
        var timeSpan = TimeSpan.FromSeconds(seconds);
        return timeSpan.TotalHours >= 1 
            ? $"{(int)timeSpan.TotalHours}:{timeSpan.Minutes:D2}:{timeSpan.Seconds:D2}" 
            : $"{timeSpan.Minutes}:{timeSpan.Seconds:D2}";
    }
}

@page "/search"
@inject ITrackService TrackService
@inject NavigationManager NavigationManager

<PageTitle>Search Tracks - RemixHub</PageTitle>

<div class="container my-4">
    <h1>Search</h1>
    <p class="lead">Find exactly what you're looking for</p>
    
    <div class="row mb-4">
        <div class="col-md-8 offset-md-2">
            <div class="input-group mb-3">
                <input type="text" class="form-control form-control-lg" 
                       placeholder="Search for tracks, artists, or genres..." 
                       @bind="searchQuery" 
                       @bind:event="oninput" 
                       @onkeyup="HandleKeyPress" />
                <button class="btn btn-primary" type="button" @onclick="PerformSearch">
                    <i class="bi bi-search"></i> Search
                </button>
            </div>
        </div>
    </div>
    
    @if (searching)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Searching...</span>
            </div>
            <span class="ms-2">Searching...</span>
        </div>
    }
    else if (hasSearched && (searchResults == null || !searchResults.Any()))
    {
        <div class="alert alert-info text-center">
            <h4>No results found</h4>
            <p>Try different keywords or check out the explore page for more tracks.</p>
        </div>
    }
    else if (hasSearched)
    {
        <h2 class="mb-3">Search Results for "@searchQuery"</h2>
        
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var track in searchResults)
            {
                <div class="col">
                    <div class="card h-100 track-card">
                        <div class="card-body">
                            <h5 class="card-title">@track.Title</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@track.Artist</h6>
                            <p class="card-text text-truncate">@track.Description</p>
                            <div class="mb-2">
                                <span class="genre-badge">@track.GenreName</span>
                                @if (!string.IsNullOrEmpty(track.SubgenreName))
                                {
                                    <span class="genre-badge">@track.SubgenreName</span>
                                }
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    <i class="bi bi-clock"></i> @FormatDuration(track.DurationSeconds)
                                </small>
                                <small class="text-muted">
                                    <i class="bi bi-calendar3"></i> @track.UploadDate.ToString("MMM dd, yyyy")
                                </small>
                            </div>
                        </div>
                        <div class="card-footer bg-transparent">
                            <a href="@($"track/{track.TrackId}")" class="btn btn-sm btn-primary w-100">View Details</a>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <div class="d-flex justify-content-center mt-4">
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                        <a class="page-link" href="javascript:void(0)" @onclick="() => ChangePage(currentPage - 1)" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        var pageNumber = i;
                        <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                            <a class="page-link" href="javascript:void(0)" @onclick="() => ChangePage(pageNumber)">@pageNumber</a>
                        </li>
                    }
                    
                    <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                        <a class="page-link" href="javascript:void(0)" @onclick="() => ChangePage(currentPage + 1)" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    }
</div>

@code {
    private string searchQuery = string.Empty;
    private List<TrackViewModel> searchResults = new List<TrackViewModel>();
    private bool searching = false;
    private bool hasSearched = false;
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 12;
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string q { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(q))
        {
            searchQuery = q;
            await PerformSearch();
        }
    }
    
    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            PerformSearch();
        }
    }
    
    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
            return;
            
        searching = true;
        hasSearched = true;
        currentPage = 1;
        
        try
        {
            var filter = new TrackFilterViewModel
            {
                Keyword = searchQuery,
                Page = currentPage,
                PageSize = pageSize,
                SortBy = "newest"
            };
            
            var result = await TrackService.GetTracksAsync(filter);
            
            searchResults = result.Tracks;
            totalPages = (int)Math.Ceiling((double)result.TotalCount / result.PageSize);
            
            NavigationManager.NavigateTo($"search?q={Uri.EscapeDataString(searchQuery)}", false);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching tracks: {ex.Message}");
        }
        finally
        {
            searching = false;
        }
    }
    
    private async Task ChangePage(int page)
    {
        if (page < 1 || page > totalPages)
            return;
            
        searching = true;
        currentPage = page;
        
        try
        {
            var filter = new TrackFilterViewModel
            {
                Keyword = searchQuery,
                Page = currentPage,
                PageSize = pageSize,
                SortBy = "newest"
            };
            
            var result = await TrackService.GetTracksAsync(filter);
            
            searchResults = result.Tracks;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error changing page: {ex.Message}");
        }
        finally
        {
            searching = false;
        }
    }
    
    private string FormatDuration(int seconds)
    {
        var timeSpan = TimeSpan.FromSeconds(seconds);
        return timeSpan.TotalHours >= 1 
            ? $"{(int)timeSpan.TotalHours}:{timeSpan.Minutes:D2}:{timeSpan.Seconds:D2}" 
            : $"{timeSpan.Minutes}:{timeSpan.Seconds:D2}";
    }
}
